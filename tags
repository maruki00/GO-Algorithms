!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AddEdge	6-Graph/graph.go	/^func (g *Graph) AddEdge(from, to int) {$/;"	f
AddVertex	6-Graph/graph.go	/^func (g *Graph) AddVertex(k int) {$/;"	f
Alphabites	5-Trie/Trie.go	/^const Alphabites = 26$/;"	c
DoubleLinkedList	4-LinkedList/double.go	/^type DoubleLinkedList struct {$/;"	t
DoubleNode	4-LinkedList/double.go	/^type DoubleNode struct {$/;"	t
Graph	6-Graph/graph.go	/^type Graph struct {$/;"	t
InitTrie	5-Trie/Trie.go	/^func InitTrie() *Trie {$/;"	f
ListNode	practice/addTwoNumbers/main.go	/^type ListNode struct {$/;"	t
ListNode	practice/hasCycle/main.go	/^type ListNode struct {$/;"	t
ListNode	practice/removeDuplicatesfromSortedList/main.go	/^type ListNode struct {$/;"	t
MAXINT	practice/stringToInteger/main.go	/^const MAXINT = 2147483647$/;"	c
MININT	practice/stringToInteger/main.go	/^const MININT = -2147483648$/;"	c
Node	5-Trie/Trie.go	/^type Node struct {$/;"	t
Node	5-Trie/tree.go	/^type Node struct {$/;"	t
NodeSimple	4-LinkedList/simple.go	/^type NodeSimple struct {$/;"	t
Print	6-Graph/graph.go	/^func (g *Graph) Print() {$/;"	f
SimpleLinkedList	4-LinkedList/simple.go	/^type SimpleLinkedList struct {$/;"	t
Stack	2-stack/stack.go	/^type Stack struct {$/;"	t
Stack	3-Queue/queue.go	/^type Stack struct {$/;"	t
Stack	practice/evaluateReversePoslishNation/main.go	/^type Stack struct {$/;"	t
TreeNode	practice/arrayToTree/main.go	/^type TreeNode struct {$/;"	t
TreeNode	practice/balancedBinaryTree/main.go	/^type TreeNode struct {$/;"	t
TreeNode	practice/binaryTreeInorderTraversal/main.go	/^type TreeNode struct {$/;"	t
TreeNode	practice/binaryTreePostOrderTraversal/main.go	/^type TreeNode struct {$/;"	t
TreeNode	practice/binaryTreePreorderTravesal/main.go	/^type TreeNode struct {$/;"	t
TreeNode	practice/maximumDepthofBinaryTree/main.go	/^type TreeNode struct {$/;"	t
TreeNode	practice/minDepthOfBinaryTree/main.go	/^type TreeNode struct {$/;"	t
TreeNode	practice/pathSum/main.go	/^type TreeNode struct {$/;"	t
TreeNode	practice/sameTree/main.go	/^type TreeNode struct {$/;"	t
TreeNode	practice/symmeetricTree/main.go	/^type TreeNode struct {$/;"	t
Trie	5-Trie/Trie.go	/^type Trie struct {$/;"	t
Vertex	6-Graph/graph.go	/^type Vertex struct {$/;"	t
_containsDuplicate	practice/containsDuplicate/main.go	/^func _containsDuplicate(nums []int) bool {$/;"	f
_findMedianSortedArrays	practice/medianofTwoSortedArrays/main.go	/^func _findMedianSortedArrays(nums1 []int, nums2 []int) float64 {$/;"	f
addBinary	practice/addBinary/main.go	/^func addBinary(a string, b string) string {$/;"	f
addTwoNumbers	practice/addTwoNumbers/main.go	/^func addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {$/;"	f
append	3-Queue/queue.go	/^func (obj *Stack) append(item int) {$/;"	f
append	4-LinkedList/double.go	/^func (obj *DoubleLinkedList) append(value any) {$/;"	f
append	4-LinkedList/simple.go	/^func (obj *SimpleLinkedList) append(value any) {$/;"	f
buildArray	practice/buildArrayFromPermutation/main.go	/^func buildArray(nums []int) []int {$/;"	f
clear	4-LinkedList/double.go	/^func (obj *DoubleLinkedList) clear() {$/;"	f
clear	4-LinkedList/simple.go	/^func (obj *SimpleLinkedList) clear() {$/;"	f
climbStairs	practice/climbingStairs/main.go	/^func climbStairs(n int) int {$/;"	f
contains	6-Graph/graph.go	/^func (g *Graph) contains(s []*Vertex, k int) bool {$/;"	f
containsDuplicate	practice/containsDuplicate/main.go	/^func containsDuplicate(nums []int) bool {$/;"	f
containsNearbyDuplicate	practice/contiansDuplicate2/main.go	/^func containsNearbyDuplicate(nums []int, k int) bool {$/;"	f
convert	practice/zigzagConversion/main.go	/^func convert(s string, numRows int) string {$/;"	f
dailyTemperatures	practice/dailyTemperatures/main.go	/^func dailyTemperatures(temperatures []int) []int {$/;"	f
deleteDuplicates	practice/removeDuplicatesfromSortedList/main.go	/^func deleteDuplicates(head *ListNode) *ListNode {$/;"	f
evalRPN	practice/evaluateReversePoslishNation/main.go	/^func evalRPN(tokens []string) int {$/;"	f
findCenter	practice/findCenterOfStartGraph/main.go	/^func findCenter(edges [][]int) int {$/;"	f
findDisappearedNumbers	practice/findAllNumbersDisappearedInArray/main.go	/^func findDisappearedNumbers(nums []int) []int {$/;"	f
findMedianSortedArrays	practice/medianofTwoSortedArrays/main.go	/^func findMedianSortedArrays(nums1 []int, nums2 []int) float64 {$/;"	f
findPalindrome	practice/findFirstPalindromixString/main.go	/^func findPalindrome(words []string) string {$/;"	f
generate	practice/pascalTriangle/main.go	/^func generate(numRows int) [][]int {$/;"	f
get	3-Queue/queue.go	/^func (obj *Stack) get() int {$/;"	f
getAncestors	practice/allAncestorsOfANodeInADirectedAcyclicGraph/main.go	/^func getAncestors(n int, edges [][]int) [][]int {$/;"	f
getMinLen	practice/longestCommonPrefix/main.go	/^func getMinLen(s []string) int {$/;"	f
getRow	practice/pascalTriangle2/main.go	/^func getRow(rowIndex int) []int {$/;"	f
getSum	practice/sumOfTwoInteger/main.go	/^func getSum(a int, b int) int {$/;"	f
getVertex	6-Graph/graph.go	/^func (g *Graph) getVertex(k int) *Vertex {$/;"	f
groupAnagrams	practice/groupAnagrams/main.go	/^func groupAnagrams(strs []string) [][]string {$/;"	f
hasCycle	practice/hasCycle/main.go	/^func hasCycle(head *ListNode) bool {$/;"	f
hasPathSum	practice/pathSum/main.go	/^func hasPathSum(root *TreeNode, sum int) bool {$/;"	f
inorderTraversal	practice/binaryTreeInorderTraversal/main.go	/^func inorderTraversal(root *TreeNode) []int {$/;"	f
insert	5-Trie/Trie.go	/^func (obj *Trie) insert(w string) {$/;"	f
intersect	practice/intersectionOfTwoArray2/main.go	/^func intersect(nums1 []int, nums2 []int) []int {$/;"	f
intersection	practice/intersectionOfTwoArray/main.go	/^func intersection(nums1 []int, nums2 []int) []int {$/;"	f
intersection_	practice/intersectionOfTwoArray/main.go	/^func intersection_(nums1 []int, nums2 []int) []int {$/;"	f
isAnagram	practice/validAnagraM/main.go	/^func isAnagram(s string, t string) bool {$/;"	f
isBalanced	practice/balancedBinaryTree/main.go	/^func isBalanced(root *TreeNode) bool {$/;"	f
isMatch	practice/regularExpressionMatching/main.go	/^func isMatch(s string, p string) bool {$/;"	f
isPalindrome	practice/palindromNumber/main.go	/^func isPalindrome(x int) bool {$/;"	f
isPalindrome	practice/palindromeNumer/main.go	/^func isPalindrome(x int) bool {$/;"	f
isPalindrome	practice/validePalindrome/main.go	/^func isPalindrome(s string) bool {$/;"	f
isPalindrome1	practice/validePalindrome/main.go	/^func isPalindrome1(s string) bool {$/;"	f
isSameTree	practice/sameTree/main.go	/^func isSameTree(p *TreeNode, q *TreeNode) bool {$/;"	f
isSameTree_	practice/sameTree/main.go	/^func isSameTree_(p *TreeNode, q *TreeNode) bool {$/;"	f
isSymmetric	practice/symmeetricTree/main.go	/^func isSymmetric(root *TreeNode) bool {$/;"	f
lengthOfLastWord	practice/lenghtOfLastWord/main.go	/^func lengthOfLastWord(s string) int {$/;"	f
longestCommonPrefix	practice/longestCommonPrefix/main.go	/^func longestCommonPrefix(strs []string) string {$/;"	f
longestPalindrome	practice/longestPalindromicSubstring/main.go	/^func longestPalindrome(s string) string {$/;"	f
main	1-array/dynamic-array.go	/^func main() {$/;"	f
main	1-array/dynamic-array.go	/^package main$/;"	p
main	1-array/static-array.go	/^func main() {$/;"	f
main	1-array/static-array.go	/^package main$/;"	p
main	2-stack/stack.go	/^func main() {$/;"	f
main	2-stack/stack.go	/^package main$/;"	p
main	3-Queue/queue.go	/^func main() {$/;"	f
main	3-Queue/queue.go	/^package main$/;"	p
main	4-LinkedList/double.go	/^func main() {$/;"	f
main	4-LinkedList/double.go	/^package main$/;"	p
main	4-LinkedList/simple.go	/^func main() {$/;"	f
main	4-LinkedList/simple.go	/^package main$/;"	p
main	5-Trie/Trie.go	/^func main() {$/;"	f
main	5-Trie/Trie.go	/^package main$/;"	p
main	5-Trie/tree.go	/^package main$/;"	p
main	6-Graph/graph.go	/^func main() {$/;"	f
main	6-Graph/graph.go	/^package main$/;"	p
main	7-Search/binarysearch.go	/^func main() {$/;"	f
main	7-Search/binarysearch.go	/^package main$/;"	p
main	7-Search/linearSearch.go	/^func main() {$/;"	f
main	7-Search/linearSearch.go	/^package main$/;"	p
main	practice/MostWatterContainer/main.go	/^func main() {$/;"	f
main	practice/MostWatterContainer/main.go	/^package main$/;"	p
main	practice/addBinary/main.go	/^func main() {$/;"	f
main	practice/addBinary/main.go	/^package main$/;"	p
main	practice/addTwoNumbers/main.go	/^func main() {$/;"	f
main	practice/addTwoNumbers/main.go	/^package main$/;"	p
main	practice/allAncestorsOfANodeInADirectedAcyclicGraph/main.go	/^func main() {$/;"	f
main	practice/allAncestorsOfANodeInADirectedAcyclicGraph/main.go	/^package main$/;"	p
main	practice/arrayToTree/main.go	/^func main() {$/;"	f
main	practice/arrayToTree/main.go	/^package main$/;"	p
main	practice/balancedBinaryTree/main.go	/^func main() {$/;"	f
main	practice/balancedBinaryTree/main.go	/^package main$/;"	p
main	practice/bestTimeToBuyAndSekkStock/main.go	/^func main() {$/;"	f
main	practice/bestTimeToBuyAndSekkStock/main.go	/^package main$/;"	p
main	practice/binaryTreeInorderTraversal/main.go	/^func main() {$/;"	f
main	practice/binaryTreeInorderTraversal/main.go	/^package main$/;"	p
main	practice/binaryTreePostOrderTraversal/main.go	/^func main() {$/;"	f
main	practice/binaryTreePostOrderTraversal/main.go	/^package main$/;"	p
main	practice/binaryTreePreorderTravesal/main.go	/^func main() {$/;"	f
main	practice/binaryTreePreorderTravesal/main.go	/^package main$/;"	p
main	practice/buildArrayFromPermutation/main.go	/^func main() {$/;"	f
main	practice/buildArrayFromPermutation/main.go	/^package main$/;"	p
main	practice/climbingStairs/main.go	/^func main() {$/;"	f
main	practice/climbingStairs/main.go	/^package main$/;"	p
main	practice/containerWithMostWather/main.go	/^func main() {$/;"	f
main	practice/containerWithMostWather/main.go	/^package main$/;"	p
main	practice/containsDuplicate/main.go	/^func main() {$/;"	f
main	practice/containsDuplicate/main.go	/^package main$/;"	p
main	practice/contiansDuplicate2/main.go	/^func main() {$/;"	f
main	practice/contiansDuplicate2/main.go	/^package main$/;"	p
main	practice/dailyTemperatures/main.go	/^func main() {$/;"	f
main	practice/dailyTemperatures/main.go	/^package main$/;"	p
main	practice/evaluateReversePoslishNation/main.go	/^func main() {$/;"	f
main	practice/evaluateReversePoslishNation/main.go	/^package main$/;"	p
main	practice/findAllNumbersDisappearedInArray/main.go	/^func main() {$/;"	f
main	practice/findAllNumbersDisappearedInArray/main.go	/^package main$/;"	p
main	practice/findCenterOfStartGraph/main.go	/^func main() {$/;"	f
main	practice/findCenterOfStartGraph/main.go	/^package main$/;"	p
main	practice/findFirstPalindromixString/main.go	/^func main() {$/;"	f
main	practice/findFirstPalindromixString/main.go	/^package main$/;"	p
main	practice/findIndexOfSubString/main.go	/^func main() {$/;"	f
main	practice/findIndexOfSubString/main.go	/^package main$/;"	p
main	practice/groupAnagrams/main.go	/^func main() {$/;"	f
main	practice/groupAnagrams/main.go	/^package main$/;"	p
main	practice/hasCycle/main.go	/^func main() {$/;"	f
main	practice/hasCycle/main.go	/^package main$/;"	p
main	practice/intersectionOfTwoArray/main.go	/^func main() {$/;"	f
main	practice/intersectionOfTwoArray/main.go	/^package main$/;"	p
main	practice/intersectionOfTwoArray2/main.go	/^func main() {$/;"	f
main	practice/intersectionOfTwoArray2/main.go	/^package main$/;"	p
main	practice/lenghtOfLastWord/main.go	/^func main() {$/;"	f
main	practice/lenghtOfLastWord/main.go	/^package main$/;"	p
main	practice/longestCommonPrefix/main.go	/^func main() {$/;"	f
main	practice/longestCommonPrefix/main.go	/^package main$/;"	p
main	practice/longestPalindromicSubstring/main.go	/^func main() {$/;"	f
main	practice/longestPalindromicSubstring/main.go	/^package main$/;"	p
main	practice/majorityElement/main.go	/^func main() {$/;"	f
main	practice/majorityElement/main.go	/^package main$/;"	p
main	practice/maximumDepthofBinaryTree/main.go	/^func main() {$/;"	f
main	practice/maximumDepthofBinaryTree/main.go	/^package main$/;"	p
main	practice/maximumTotalImportanceOfRoads/main.go	/^func main() {$/;"	f
main	practice/maximumTotalImportanceOfRoads/main.go	/^package main$/;"	p
main	practice/medianofTwoSortedArrays/main.go	/^func main() {$/;"	f
main	practice/medianofTwoSortedArrays/main.go	/^package main$/;"	p
main	practice/mergeSortedArray/main.go	/^func main() {$/;"	f
main	practice/mergeSortedArray/main.go	/^package main$/;"	p
main	practice/minDepthOfBinaryTree/main.go	/^func main() {$/;"	f
main	practice/minDepthOfBinaryTree/main.go	/^package main$/;"	p
main	practice/missingNumber/main.go	/^func main() {$/;"	f
main	practice/missingNumber/main.go	/^package main$/;"	p
main	practice/palindromNumber/main.go	/^func main() {$/;"	f
main	practice/palindromNumber/main.go	/^package main$/;"	p
main	practice/palindromeNumer/main.go	/^func main() {$/;"	f
main	practice/palindromeNumer/main.go	/^package main$/;"	p
main	practice/pascalTriangle/main.go	/^func main() {$/;"	f
main	practice/pascalTriangle/main.go	/^package main$/;"	p
main	practice/pascalTriangle2/main.go	/^func main() {$/;"	f
main	practice/pascalTriangle2/main.go	/^package main$/;"	p
main	practice/pathSum/main.go	/^func main() {$/;"	f
main	practice/pathSum/main.go	/^package main$/;"	p
main	practice/plusOne/main.go	/^func main() {$/;"	f
main	practice/plusOne/main.go	/^package main$/;"	p
main	practice/regularExpressionMatching/main.go	/^func main() {$/;"	f
main	practice/regularExpressionMatching/main.go	/^package main$/;"	p
main	practice/removeDuplicatesfromSortedList/main.go	/^func main() {$/;"	f
main	practice/removeDuplicatesfromSortedList/main.go	/^package main$/;"	p
main	practice/removeElement/main.go	/^func main() {$/;"	f
main	practice/removeElement/main.go	/^package main$/;"	p
main	practice/reverseInteger/main.go	/^func main() {$/;"	f
main	practice/reverseInteger/main.go	/^package main$/;"	p
main	practice/romanTointeger/main.go	/^func main() {$/;"	f
main	practice/romanTointeger/main.go	/^package main$/;"	p
main	practice/sameTree/main.go	/^func main() {$/;"	f
main	practice/sameTree/main.go	/^package main$/;"	p
main	practice/searchInsertPosition/main.go	/^func main() {$/;"	f
main	practice/searchInsertPosition/main.go	/^package main$/;"	p
main	practice/singleNumber/main.go	/^func main() {$/;"	f
main	practice/singleNumber/main.go	/^package main$/;"	p
main	practice/sqrt/main.go	/^func main() {$/;"	f
main	practice/sqrt/main.go	/^package main$/;"	p
main	practice/stringToInteger/main.go	/^func main() {$/;"	f
main	practice/stringToInteger/main.go	/^package main$/;"	p
main	practice/sumOfTwoInteger/main.go	/^func main() {$/;"	f
main	practice/sumOfTwoInteger/main.go	/^package main$/;"	p
main	practice/symmeetricTree/main.go	/^func main() {$/;"	f
main	practice/symmeetricTree/main.go	/^package main$/;"	p
main	practice/threeConsicutiveOdds/main.go	/^func main() {$/;"	f
main	practice/threeConsicutiveOdds/main.go	/^package main$/;"	p
main	practice/topKFrequenetElements/main.go	/^func main() {$/;"	f
main	practice/topKFrequenetElements/main.go	/^package main$/;"	p
main	practice/treeSum/main.go	/^func main() {$/;"	f
main	practice/treeSum/main.go	/^package main$/;"	p
main	practice/twoSums/main.go	/^func main() {$/;"	f
main	practice/twoSums/main.go	/^package main$/;"	p
main	practice/validAnagraM/main.go	/^func main() {$/;"	f
main	practice/validAnagraM/main.go	/^package main$/;"	p
main	practice/validePalindrome/main.go	/^func main() {$/;"	f
main	practice/validePalindrome/main.go	/^package main$/;"	p
main	practice/zigzagConversion/main.go	/^func main() {$/;"	f
main	practice/zigzagConversion/main.go	/^package main$/;"	p
majorityElement	practice/majorityElement/main.go	/^func majorityElement(nums []int) int {$/;"	f
maxArea	practice/containerWithMostWather/main.go	/^func maxArea(height []int) int {$/;"	f
maxDepth	practice/maximumDepthofBinaryTree/main.go	/^func maxDepth(root *TreeNode) int {$/;"	f
maxDepth_	practice/maximumDepthofBinaryTree/main.go	/^func maxDepth_(root *TreeNode) int {$/;"	f
maxProfit	practice/bestTimeToBuyAndSekkStock/main.go	/^func maxProfit(prices []int) int {$/;"	f
maximumImportance	practice/maximumTotalImportanceOfRoads/main.go	/^func maximumImportance(n int, roads [][]int) int64 {$/;"	f
merge	practice/mergeSortedArray/main.go	/^func merge(nums1 []int, m int, nums2 []int, n int) {$/;"	f
minDepth	practice/minDepthOfBinaryTree/main.go	/^func minDepth(root *TreeNode) int {$/;"	f
missingNumber	practice/missingNumber/main.go	/^func missingNumber(nums []int) int {$/;"	f
myAtoi	practice/stringToInteger/main.go	/^func myAtoi(s string) int {$/;"	f
mySqrt	practice/sqrt/main.go	/^func mySqrt(x int) int {$/;"	f
mySqrt1	practice/sqrt/main.go	/^func mySqrt1(x int) int {$/;"	f
numToArray	practice/palindromeNumer/main.go	/^func numToArray(num int) []int {$/;"	f
plusOne	practice/plusOne/main.go	/^func plusOne(digits []int) []int {$/;"	f
pop	2-stack/stack.go	/^func (obj *Stack) pop() int {$/;"	f
pop	practice/evaluateReversePoslishNation/main.go	/^func (obj *Stack) pop() int {$/;"	f
postorderTraversal	practice/binaryTreePostOrderTraversal/main.go	/^func postorderTraversal(root *TreeNode) []int {$/;"	f
preappend	4-LinkedList/simple.go	/^func (obj *SimpleLinkedList) preappend(value any) {$/;"	f
preorderTraversal	practice/binaryTreePreorderTravesal/main.go	/^func preorderTraversal(root *TreeNode) []int {$/;"	f
print	4-LinkedList/double.go	/^func (obj *DoubleLinkedList) print() {$/;"	f
print	4-LinkedList/simple.go	/^func (obj *SimpleLinkedList) print() {$/;"	f
print	practice/addTwoNumbers/main.go	/^func print(l1 *ListNode) {$/;"	f
print	practice/removeDuplicatesfromSortedList/main.go	/^func print(head *ListNode) {$/;"	f
push	2-stack/stack.go	/^func (obj *Stack) push(item int) {$/;"	f
push	practice/evaluateReversePoslishNation/main.go	/^func (obj *Stack) push(val int) {$/;"	f
remove	4-LinkedList/double.go	/^func (obj *DoubleLinkedList) remove(value any) {$/;"	f
remove	4-LinkedList/simple.go	/^func (obj *SimpleLinkedList) remove(value any) {$/;"	f
removeElement	practice/removeElement/main.go	/^func removeElement(nums []int, val int) int {$/;"	f
reverse	practice/reverseInteger/main.go	/^func reverse(x int) int {$/;"	f
reverseNum	practice/palindromeNumer/main.go	/^func reverseNum(num int) int {$/;"	f
romanToInt	practice/romanTointeger/main.go	/^func romanToInt(s string) int {$/;"	f
search	5-Trie/Trie.go	/^func (obj *Trie) search(w string) bool {$/;"	f
searchInsert	practice/searchInsertPosition/main.go	/^func searchInsert(nums []int, target int) int {$/;"	f
singleNumber	practice/singleNumber/main.go	/^func singleNumber(nums []int) int {$/;"	f
sortedArrayToBTS	practice/arrayToTree/main.go	/^func sortedArrayToBTS(nums []int) *TreeNode {$/;"	f
strStr	practice/findIndexOfSubString/main.go	/^func strStr(haystack string, needle string) int {$/;"	f
threeConsecutiveOdds	practice/threeConsicutiveOdds/main.go	/^func threeConsecutiveOdds(arr []int) bool {$/;"	f
threeSum	practice/treeSum/main.go	/^func threeSum(nums []int) [][]int {$/;"	f
topKFrequent	practice/topKFrequenetElements/main.go	/^func topKFrequent(nums []int, k int) []int {$/;"	f
traverse	practice/allAncestorsOfANodeInADirectedAcyclicGraph/main.go	/^func traverse(graph [][]int, ans [][]int, last int) {$/;"	f
twoSum	practice/twoSums/main.go	/^func twoSum(nums []int, target int) []int {$/;"	f
uniqueAppend	practice/intersectionOfTwoArray/main.go	/^func uniqueAppend(nums1 []int, item int) []int {$/;"	f
